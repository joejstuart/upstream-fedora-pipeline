#!groovy


timestamps {
    def libraries = ['ci-pipeline'             : ['master', 'https://github.com/CentOS-PaaS-SIG/ci-pipeline.git'],
                     'upstream-fedora-pipeline': ['master', 'https://github.com/CentOS-PaaS-SIG/upstream-fedora-pipeline.git']]

    libraries.each { name, repo ->
        library identifier: "${name}@${repo[0]}",
                retriever: modernSCM([$class: 'GitSCMSource',
                                      remote: repo[1]])

    }

    // Audit file for all messages sent.
    msgAuditFile = "messages/message-audit.json"

    // Number of times to keep retrying to make sure message is ingested
    // by datagrepper
    fedmsgRetryCount = 120

    properties(
            [
                    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '500', daysToKeepStr: '', numToKeepStr: '500')),
                    parameters(
                            [
                                    string(description: 'fedora-fedmsg', defaultValue: '{}', name: 'CI_MESSAGE')
                            ]
                    ),
                    pipelineTriggers(
                            [
                                    [$class: 'CIBuildTrigger', checks: [[expectedValue: '1', field: 'new']], providerName: 'fedora-fedmsg', selector: 'topic = "org.fedoraproject.prod.buildsys.build.state.change"']]
                    )
            ]
    )

    node() {

        messageVars = pipelineData.ciMessage(env.CI_MESSAGE)

        ciPipeline {
            stepName = 'upstream-fedora-pipeline-build-trigger'
            stage(stepName) {

                skippedMsg = setMessageFields('package.ignored', 'build')
                queuedMsg = pipelineData.setMessageFields('package.queued', 'build')

                validMessage = buildTrigger(skippedMsg: skippedMsg, queuedMsg: queuedMsg) {
                    targetBranch = packagepipelineUtils.checkBranch()
                    testsExist = pipelineUtils.checkTests(env.fed_repo, env.fed_branch, 'classic')
                    primaryKoji = fed_instance == "primary"
                    pipelineUtils.initializeAuditFile(msgAuditFile)

                    return targetBranch && testsExist && primaryKoji

                }

            }

            if (validMessage) {
                stepName = 'schedule build'
                params = [
                        PROVIDED_KOJI_TASKID: messageVars['task_id'],
                        CI_MESSAGE: env.CI_MESSAGE
                ]

                stage(stepName) {

                   scheduleBuild(buildName: , params: params)
                }

            } else {
                echo "CI_MESSAGE was invalid. Skipping..."
                messageFields = packagepipelineUtils.setMessageFields('package.ignored', 'build')
                pipelineUtils.sendMessageWithAudit(messageFields['topic'], messageFields['properties'], messageFields['content'], msgAuditFile, fedmsgRetryCount)
                currentBuild.description = "*Build Skipped*"
            }
        }

    }
}
