#!groovy


// CANNED CI_MESSAGE
def CANNED_CI_MESSAGE = '{"commit":{"username":"eseyman","stats":{"files":{"perl-Net-FTPSSL.spec":{"deletions":2,"additions":5,"lines":7},".gitignore":{"deletions":0,"additions":1,"lines":1},"sources":{"deletions":1,"additions":1,"lines":2}},"total":{"deletions":3,"files":3,"additions":7,"lines":10}},"name":"Emmanuel Seyman","rev":"c1c7de158fa72de5bd279daaaac9f75d0b3e65cd","namespace":"rpms","agent":"eseyman","summary":"Update to 0.40","repo":"perl-Net-FTPSSL","branch":"master","seen":false,"path":"/srv/git/repositories/rpms/perl-Net-FTPSSL.git","message":"Update to 0.40\n","email":"emmanuel@seyman.fr"},"topic":"org.fedoraproject.prod.git.receive"}'


def executionID = UUID.randomUUID().toString()

// Pod name to use
def podName = 'fedora-cloud-' + executionID + '-allpkgs'

def libraries = ['cico-pipeline': ['master', 'https://github.com/CentOS/cico-pipeline-library.git'],
                 'ci-pipeline'  : ['master', 'https://github.com/CentOS-PaaS-SIG/ci-pipeline.git'],
                 'contralib'    : ['messaging', 'https://github.com/joejstuart/contra-lib.git']]

libraries.each { name, repo ->
    library identifier: "${name}@${repo[0]}",
            retriever: modernSCM([$class: 'GitSCMSource',
                                  remote: repo[1]])

}

// Check out PR's version of library
library identifier: "upstream-fedora-pipeline@${env.ghprbActualCommit}",
        retriever: modernSCM([$class: 'GitSCMSource',
                              remote: "https://github.com/${env.ghprbGhRepository}",
                              traits: [[$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait'],
                                       [$class   : 'RefSpecsSCMSourceTrait',
                                        templates: [[value: '+refs/heads/*:refs/remotes/@{remote}/*'],
                                                    [value: '+refs/pull/*:refs/remotes/origin/pr/*']]]]])


containers = ['rpmbuild'           : [tag: env.RPMBUILD_TAG],
              'cloud-image-compose': [tag: env.CLOUD_IMAGE_COMPOSE_TAG],
              'singlehost-test'    : [tag: env.SINGLEHOST_TEST_TAG]
]

deployOpenShiftTemplate(containers: containers, docker_repo_url: 'docker-registry.default.svc:5000', podName: podName) {

    stageVars = pipelineData.prStageVars(env.CI_MESSAGE)

    ciPipeline(buildPrefix: 'contra-build-pipeline', package_name: stageVars['default']['package_name']) {

        prepareEnvironment(stageVars: stageVars)

        kojiBuild(stageVars: stageVars, containerScript: '/tmp/koji_build_pr.sh')

        repoQuery(stageVars: stageVars)

        cloudImageCompose(stageVars: stageVars)

        nvrVerify(stageVars: stageVars)

        packageTests(stageVars: stageVars)

    }

}